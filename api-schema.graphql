# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AdminCreateCommunityMemberInput {
  communityId: String!
  role: CommunityMemberRole
  userId: String!
}

input AdminCreateIdentityInput {
  ownerId: String!
  provider: IdentityProvider!
  providerId: String!
}

input AdminCreateUserInput {
  password: String
  username: String!
}

input AdminFindManyCommunityInput {
  limit: Int = 10
  page: Int = 1
  search: String
}

input AdminFindManyCommunityMemberInput {
  communityId: String!
  limit: Int = 10
  page: Int = 1
  role: CommunityMemberRole
  search: String
}

input AdminFindManyIdentityInput {
  ownerId: String
  provider: IdentityProvider
}

input AdminFindManyMintInput {
  communityId: String!
  limit: Int = 10
  page: Int = 1
  search: String
}

input AdminFindManyUserInput {
  limit: Int = 10
  page: Int = 1
  role: UserRole
  search: String
  status: UserStatus
}

input AdminUpdateCommunityInput {
  description: String
  imageUrl: String
  name: String
}

input AdminUpdateCommunityMemberInput {
  role: CommunityMemberRole
}

input AdminUpdateMintInput {
  decimals: Float
  imageUrl: String
  name: String
  secretKey: String
  symbol: String
}

input AdminUpdateUserInput {
  avatarUrl: String
  developer: Boolean
  name: String
  role: UserRole
  status: UserStatus
  username: String
}

input AnonFindManyCommunityInput {
  limit: Int = 10
  page: Int = 1
  search: String
}

type AppConfig {
  authDiscordEnabled: Boolean!
  authGithubEnabled: Boolean!
  authGoogleEnabled: Boolean!
  authPasswordEnabled: Boolean!
  authRegisterEnabled: Boolean!
  authSolanaEnabled: Boolean!
  authTwitterEnabled: Boolean!
}

type Community {
  createdAt: DateTime
  description: String!
  id: String!
  imageUrl: String
  name: String!
  publicUrl: String
  slug: String!
  updatedAt: DateTime
  viewUrl: String
}

type CommunityMember {
  communityId: String!
  createdAt: DateTime
  id: String!
  role: CommunityMemberRole!
  updatedAt: DateTime
  user: User
  userId: String!
}

type CommunityMemberPaging {
  data: [CommunityMember!]!
  meta: PagingMeta!
}

enum CommunityMemberRole {
  Admin
  Member
}

type CommunityPaging {
  data: [Community!]!
  meta: PagingMeta!
}

type Currency {
  address: String!
  decimals: Int!
  id: String
  name: String!
  programId: String!
  symbol: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Identity {
  challenges: [IdentityChallenge!]
  createdAt: DateTime!
  expired: Boolean
  id: String!
  name: String
  owner: User
  profile: JSON
  provider: IdentityProvider!
  providerId: String!
  updatedAt: DateTime!
  url: String
  verified: Boolean
}

type IdentityChallenge {
  challenge: String!
  createdAt: DateTime!
  id: String!
  ip: String!
  provider: IdentityProvider!
  providerId: String!
  signature: String
  updatedAt: DateTime!
  userAgent: String!
  verified: Boolean!
}

enum IdentityProvider {
  Discord
  GitHub
  Google
  Solana
  Twitter
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

input LinkIdentityInput {
  provider: IdentityProvider!
  providerId: String!
}

input LoginInput {
  password: String!
  username: String!
}

type Mint {
  createdAt: DateTime
  decimals: Float!
  id: String!
  imageUrl: String
  name: String!
  publicKey: String!
  symbol: String!
  updatedAt: DateTime
}

type MintPaging {
  data: [Mint!]!
  meta: PagingMeta!
}

type Mutation {
  adminCreateCommunityMember(input: AdminCreateCommunityMemberInput!): CommunityMember
  adminCreateIdentity(input: AdminCreateIdentityInput!): Identity
  adminCreatePreset(input: PresetAdminCreateInput!): Preset
  adminCreatePrice(input: PriceAdminCreateInput!): Price
  adminCreateUser(input: AdminCreateUserInput!): User
  adminCreateWallet(input: WalletAdminCreateInput!): Wallet
  adminDeleteCommunity(communityId: String!): Boolean
  adminDeleteCommunityMember(communityMemberId: String!): Boolean
  adminDeleteIdentity(identityId: String!): Boolean
  adminDeleteMint(mintId: String!): Boolean
  adminDeletePreset(presetId: String!): Boolean
  adminDeletePrice(priceId: String!): Boolean
  adminDeleteUser(userId: String!): Boolean
  adminDeleteWallet(walletId: String!): Boolean
  adminUpdateCommunity(communityId: String!, input: AdminUpdateCommunityInput!): Community
  adminUpdateCommunityMember(communityMemberId: String!, input: AdminUpdateCommunityMemberInput!): CommunityMember
  adminUpdateMint(input: AdminUpdateMintInput!, mintId: String!): Mint
  adminUpdatePreset(input: PresetAdminUpdateInput!, presetId: String!): Preset
  adminUpdatePrice(input: PriceAdminUpdateInput!, priceId: String!): Price
  adminUpdateUser(input: AdminUpdateUserInput!, userId: String!): User
  adminUpdateWallet(input: WalletAdminUpdateInput!, walletId: String!): Wallet
  anonVerifyIdentityChallenge(input: VerifyIdentityChallengeInput!): IdentityChallenge
  login(input: LoginInput!): User
  logout: Boolean
  register(input: RegisterInput!): User
  solanaRequestAirdrop(account: String!): JSON
  userCreateCommunity(input: UserCreateCommunityInput!): Community
  userCreateCommunityMember(input: UserCreateCommunityMemberInput!): CommunityMember
  userCreateMint(input: UserCreateMintInput!): Mint
  userCreateMintFromMinter(account: String!, communitySlug: String!): String
  userCreateMintFromPreset(communitySlug: String!, presetId: String!): String
  userCreateWallet(input: WalletUserCreateInput!): Wallet
  userDeleteCommunity(communityId: String!): Boolean
  userDeleteCommunityMember(communityMemberId: String!): Boolean
  userDeleteIdentity(identityId: String!): Boolean
  userDeleteMint(mintId: String!): Boolean
  userDeleteWallet(walletId: String!): Boolean
  userLinkIdentity(input: LinkIdentityInput!): Identity
  userMintToIdentity(identityId: String!, mintId: String!): JSON
  userUpdateCommunity(communityId: String!, input: UserUpdateCommunityInput!): Community
  userUpdateCommunityMember(communityMemberId: String!, input: UserUpdateCommunityMemberInput!): CommunityMember
  userUpdateMint(input: UserUpdateMintInput!, mintId: String!): Mint
  userUpdateUser(input: UserUpdateUserInput!): User
  userUpdateWallet(input: WalletUserUpdateInput!, walletId: String!): Wallet
  userVerifyIdentityChallenge(input: VerifyIdentityChallengeInput!): IdentityChallenge
}

type PagingMeta {
  currentPage: Int!
  isFirstPage: Boolean!
  isLastPage: Boolean!
  nextPage: Int
  pageCount: Int
  previousPage: Int
  totalCount: Int
}

type Preset {
  createdAt: DateTime
  description: String
  id: String!
  name: String!
  updatedAt: DateTime
}

input PresetAdminCreateInput {
  description: String
  name: String!
}

input PresetAdminFindManyInput {
  limit: Int = 10
  page: Int = 1
  search: String
}

input PresetAdminUpdateInput {
  description: String
  name: String
}

type PresetPaging {
  data: [Preset!]!
  meta: PagingMeta!
}

input PresetUserFindManyInput {
  limit: Int = 10
  page: Int = 1
  search: String
}

type Price {
  active: Boolean!
  assets: Int!
  createdAt: DateTime
  currency: Currency
  currencyId: String
  days: Int!
  id: String!
  name: String!
  preset: Preset
  presetId: String!
  price: String!
  updatedAt: DateTime
}

input PriceAdminCreateInput {
  assets: Int!
  days: Int!
  name: String!
  presetId: String!
  price: String!
}

input PriceAdminFindManyInput {
  presetId: String!
}

input PriceAdminUpdateInput {
  active: Boolean
  assets: Int!
  days: Int!
  name: String
  price: String
}

input PriceUserFindManyInput {
  presetId: String!
}

type Query {
  adminFindManyCommunity(input: AdminFindManyCommunityInput!): CommunityPaging!
  adminFindManyCommunityMember(input: AdminFindManyCommunityMemberInput!): CommunityMemberPaging!
  adminFindManyIdentity(input: AdminFindManyIdentityInput!): [Identity!]
  adminFindManyMint(input: AdminFindManyMintInput!): MintPaging!
  adminFindManyPreset(input: PresetAdminFindManyInput!): PresetPaging!
  adminFindManyPrice(input: PriceAdminFindManyInput!): [Price!]!
  adminFindManyUser(input: AdminFindManyUserInput!): UserPaging!
  adminFindManyWallet(input: WalletAdminFindManyInput!): WalletPaging!
  adminFindOneCommunity(communityId: String!): Community
  adminFindOneCommunityMember(communityMemberId: String!): CommunityMember
  adminFindOneMint(mintId: String!): Mint
  adminFindOnePreset(presetId: String!): Preset
  adminFindOnePrice(priceId: String!): Price
  adminFindOneUser(userId: String!): User
  adminFindOneWallet(walletId: String!): Wallet
  anonFindManyCommunity(input: AnonFindManyCommunityInput!): CommunityPaging!
  anonFindOneCommunity(slug: String!): Community
  anonRequestIdentityChallenge(input: RequestIdentityChallengeInput!): IdentityChallenge
  appConfig: AppConfig!
  currencies: [Currency!]!
  me: User
  solanaGetBalance(account: String!): String
  solanaGetTokenAccounts(account: String!): JSON
  solanaGetTransactions(account: String!): JSON
  uptime: Float!
  userFindManyCommunity(input: UserFindManyCommunityInput!): CommunityPaging!
  userFindManyCommunityMember(input: UserFindManyCommunityMemberInput!): CommunityMemberPaging!
  userFindManyIdentity(input: UserFindManyIdentityInput!): [Identity!]
  userFindManyMint(input: UserFindManyMintInput!): MintPaging!
  userFindManyPreset(input: PresetUserFindManyInput!): PresetPaging!
  userFindManyPrice(input: PriceUserFindManyInput!): [Price!]!
  userFindManyUser(input: UserFindManyUserInput!): UserPaging!
  userFindManyWallet(input: WalletUserFindManyInput!): WalletPaging!
  userFindOneCommunity(slug: String!): Community
  userFindOneCommunityMember(communityMemberId: String!): CommunityMember
  userFindOneMint(mintId: String!): Mint
  userFindOnePreset(presetId: String!): Preset
  userFindOneUser(username: String!): User
  userFindOneWallet(walletId: String!): Wallet
  userGetMintAccount(mintId: String!): JSON
  userGetMinter(account: String!): JSON!
  userGetMinterAssets(account: String!): JSON!
  userGetMinters: JSON!
  userGetMintersByCommunity(communitySlug: String!): JSON!
  userRequestIdentityChallenge(input: RequestIdentityChallengeInput!): IdentityChallenge
}

input RegisterInput {
  password: String!
  username: String!
}

input RequestIdentityChallengeInput {
  provider: IdentityProvider!
  providerId: String!
}

type User {
  avatarUrl: String
  createdAt: DateTime
  developer: Boolean
  id: String!
  identities: [Identity!]
  name: String
  profileUrl: String!
  role: UserRole
  status: UserStatus
  updatedAt: DateTime
  username: String
}

input UserCreateCommunityInput {
  description: String!
  imageUrl: String
  name: String!
}

input UserCreateCommunityMemberInput {
  communityId: String!
  role: CommunityMemberRole
  userId: String!
}

input UserCreateMintInput {
  communityId: String!
  decimals: Float
  imageUrl: String
  name: String!
  secretKey: String
  symbol: String!
}

input UserFindManyCommunityInput {
  limit: Int = 10
  page: Int = 1
  search: String
}

input UserFindManyCommunityMemberInput {
  communityId: String!
  limit: Int = 10
  page: Int = 1
  role: CommunityMemberRole
  search: String
}

input UserFindManyIdentityInput {
  username: String!
}

input UserFindManyMintInput {
  communityId: String!
  limit: Int = 10
  page: Int = 1
  search: String
}

input UserFindManyUserInput {
  limit: Int = 10
  page: Int = 1
  search: String
}

type UserPaging {
  data: [User!]!
  meta: PagingMeta!
}

enum UserRole {
  Admin
  User
}

enum UserStatus {
  Active
  Created
  Inactive
}

input UserUpdateCommunityInput {
  description: String
  imageUrl: String
  name: String
}

input UserUpdateCommunityMemberInput {
  role: CommunityMemberRole
}

input UserUpdateMintInput {
  decimals: Float
  imageUrl: String
  name: String
  secretKey: String
  symbol: String
}

input UserUpdateUserInput {
  avatarUrl: String
  developer: Boolean
  name: String
}

input VerifyIdentityChallengeInput {
  challenge: String!
  provider: IdentityProvider!
  providerId: String!
  signature: String!
  useLedger: Boolean = false
}

type Wallet {
  communityId: String
  createdAt: DateTime
  id: String!
  name: String!
  publicKey: String!
  updatedAt: DateTime
}

input WalletAdminCreateInput {
  communityId: String!
  secretKey: String
}

input WalletAdminFindManyInput {
  communityId: String!
  limit: Int = 10
  page: Int = 1
  search: String
}

input WalletAdminUpdateInput {
  name: String
}

type WalletPaging {
  data: [Wallet!]!
  meta: PagingMeta!
}

input WalletUserCreateInput {
  communityId: String!
  secretKey: String
}

input WalletUserFindManyInput {
  communityId: String!
  limit: Int = 10
  page: Int = 1
  search: String
}

input WalletUserUpdateInput {
  name: String
}
