generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Community {
  id          String            @id @default(cuid())
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  name        String
  slug        String            @unique
  description String
  imageUrl    String?
  members     CommunityMember[]
  wallets     Wallet[]
}

model CommunityMember {
  id          String              @id @default(cuid())
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  role        CommunityMemberRole @default(Member)
  user        User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  community   Community           @relation(fields: [communityId], references: [id], onDelete: Cascade)
  communityId String
}

model Currency {
  id        String  @id @default(cuid())
  name      String
  address   String
  programId String
  symbol    String  @unique
  decimals  Int
  prices    Price[]
}

model Identity {
  id           String              @id @default(cuid())
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  provider     IdentityProvider
  providerId   String
  name         String?
  accessToken  String? /// @encrypted
  refreshToken String? /// @encrypted
  profile      Json?
  verified     Boolean             @default(false)
  owner        User                @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId      String
  challenges   IdentityChallenge[]

  @@unique([provider, providerId])
}

model IdentityChallenge {
  id         String           @id @default(cuid())
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  challenge  String           @unique
  signature  String?
  ip         String
  userAgent  String
  verified   Boolean          @default(false)
  identity   Identity         @relation(fields: [provider, providerId], references: [provider, providerId], onDelete: Cascade)
  provider   IdentityProvider
  providerId String
}

model Preset {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  description String?
  prices      Price[]
}

model Price {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  preset     Preset   @relation(fields: [presetId], references: [id], onDelete: Cascade)
  presetId   String
  name       String
  days       Int
  assets     Int
  price      String
  currency   Currency @relation(fields: [currencyId], references: [id])
  currencyId String
  active     Boolean  @default(true)
}

model User {
  id          String            @id @default(cuid())
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  avatarUrl   String?
  developer   Boolean           @default(false)
  name        String?
  password    String? /// @encrypted
  role        UserRole          @default(User)
  status      UserStatus        @default(Created)
  username    String            @unique
  communities CommunityMember[]
  identities  Identity[]
}

model Wallet {
  id          String     @id @default(cuid())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  community   Community? @relation(fields: [communityId], references: [id], onDelete: SetNull)
  communityId String?
  feePayer    Boolean    @default(false)
  name        String
  publicKey   String     @unique
  secretKey   String
}

enum CommunityMemberRole {
  Admin
  Member
}

enum IdentityProvider {
  Discord
  GitHub
  Google
  Solana
  Twitter
}

enum UserRole {
  Admin
  User
}

enum UserStatus {
  Active
  Created
  Inactive
}
